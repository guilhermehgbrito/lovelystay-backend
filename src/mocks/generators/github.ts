import { faker } from '@faker-js/faker';
import {
  GitHubRepository,
  GitHubRepositoryLanguages,
  GitHubUser,
} from '@/lib/github/types';

export const generateMockGitHubUser = (
  overrides: Partial<GitHubUser> = {},
): GitHubUser => ({
  login: faker.internet.username(),
  id: faker.number.int({ min: 1, max: 1000000 }),
  user_view_type: 'full',
  node_id: faker.string.alphanumeric(20),
  avatar_url: faker.image.avatar(),
  gravatar_id: null,
  url: faker.internet.url(),
  html_url: faker.internet.url(),
  followers_url: faker.internet.url(),
  following_url: faker.internet.url(),
  gists_url: faker.internet.url(),
  starred_url: faker.internet.url(),
  subscriptions_url: faker.internet.url(),
  organizations_url: faker.internet.url(),
  repos_url: faker.internet.url(),
  events_url: faker.internet.url(),
  received_events_url: faker.internet.url(),
  type: 'User',
  site_admin: faker.datatype.boolean(),
  name: faker.person.fullName(),
  company: faker.company.name(),
  blog: faker.internet.url(),
  location: faker.location.city(),
  email: faker.internet.email(),
  notification_email: null,
  hireable: faker.datatype.boolean(),
  bio: faker.lorem.paragraph(),
  twitter_username: faker.internet.username(),
  public_repos: faker.number.int({ min: 0, max: 100 }),
  public_gists: faker.number.int({ min: 0, max: 50 }),
  followers: faker.number.int({ min: 0, max: 1000 }),
  following: faker.number.int({ min: 0, max: 1000 }),
  created_at: faker.date.past().toISOString(),
  updated_at: faker.date.recent().toISOString(),
  plan: {
    collaborators: faker.number.int({ min: 0, max: 10 }),
    name: faker.helpers.arrayElement(['Free', 'Pro', 'Team', 'Enterprise']),
    space: faker.number.int({ min: 976562499, max: 976562499 * 2 }),
    private_repos: faker.number.int({ min: 0, max: 100 }),
  },
  private_gists: faker.number.int({ min: 0, max: 50 }),
  total_private_repos: faker.number.int({ min: 0, max: 100 }),
  owned_private_repos: faker.number.int({ min: 0, max: 100 }),
  disk_usage: faker.number.int({ min: 0, max: 1000000 }),
  collaborators: faker.number.int({ min: 0, max: 50 }),
  ...overrides,
});

const programmingLanguages = [
  'JavaScript',
  'TypeScript',
  'Python',
  'Java',
  'Go',
  'Rust',
  'C++',
  'Ruby',
  'PHP',
  'Swift',
];

export const generateMockGitHubRepository = (
  overrides: Partial<GitHubRepository> = {},
): GitHubRepository => ({
  id: faker.number.int({ min: 1, max: 1000000 }),
  node_id: faker.string.alphanumeric(20),
  name: faker.word.sample(),
  full_name: faker.word.sample(),
  private: faker.datatype.boolean(),
  owner: generateMockGitHubUser(),
  html_url: faker.internet.url(),
  description: faker.lorem.sentence(),
  fork: faker.datatype.boolean(),
  url: faker.internet.url(),
  forks_url: faker.internet.url(),
  keys_url: faker.internet.url(),
  collaborators_url: faker.internet.url(),
  teams_url: faker.internet.url(),
  hooks_url: faker.internet.url(),
  issue_events_url: faker.internet.url(),
  events_url: faker.internet.url(),
  assignees_url: faker.internet.url(),
  branches_url: faker.internet.url(),
  tags_url: faker.internet.url(),
  blobs_url: faker.internet.url(),
  git_tags_url: faker.internet.url(),
  git_refs_url: faker.internet.url(),
  trees_url: faker.internet.url(),
  statuses_url: faker.internet.url(),
  languages_url: faker.internet.url(),
  stargazers_url: faker.internet.url(),
  contributors_url: faker.internet.url(),
  subscribers_url: faker.internet.url(),
  subscription_url: faker.internet.url(),
  commits_url: faker.internet.url(),
  git_commits_url: faker.internet.url(),
  comments_url: faker.internet.url(),
  issue_comment_url: faker.internet.url(),
  contents_url: faker.internet.url(),
  compare_url: faker.internet.url(),
  merges_url: faker.internet.url(),
  archive_url: faker.internet.url(),
  downloads_url: faker.internet.url(),
  issues_url: faker.internet.url(),
  pulls_url: faker.internet.url(),
  milestones_url: faker.internet.url(),
  notifications_url: faker.internet.url(),
  labels_url: faker.internet.url(),
  releases_url: faker.internet.url(),
  deployments_url: faker.internet.url(),
  created_at: faker.date.past().toISOString(),
  updated_at: faker.date.recent().toISOString(),
  pushed_at: faker.date.recent().toISOString(),
  git_url: faker.internet.url(),
  ssh_url: faker.internet.url(),
  clone_url: faker.internet.url(),
  svn_url: faker.internet.url(),
  homepage: faker.internet.url(),
  size: faker.number.int({ min: 0, max: 10000 }),
  stargazers_count: faker.number.int({ min: 0, max: 10000 }),
  watchers_count: faker.number.int({ min: 0, max: 10000 }),
  language: faker.helpers.arrayElement(programmingLanguages),
  has_issues: faker.datatype.boolean(),
  has_projects: faker.datatype.boolean(),
  has_downloads: faker.datatype.boolean(),
  has_wiki: faker.datatype.boolean(),
  has_pages: faker.datatype.boolean(),
  has_discussions: faker.datatype.boolean(),
  forks_count: faker.number.int({ min: 0, max: 1000 }),
  mirror_url: null,
  archived: faker.datatype.boolean(),
  disabled: faker.datatype.boolean(),
  open_issues_count: faker.number.int({ min: 0, max: 100 }),
  license: {
    key: faker.string.alphanumeric(10),
    name: faker.helpers.arrayElement([
      'MIT',
      'Apache-2.0',
      'GPL-3.0',
      'BSD-3-Clause',
    ]),
    spdx_id: faker.string.alphanumeric(10),
    url: faker.internet.url(),
    node_id: faker.string.alphanumeric(20),
  },
  allow_forking: faker.datatype.boolean(),
  is_template: faker.datatype.boolean(),
  web_commit_signoff_required: faker.datatype.boolean(),
  topics: faker.helpers.arrayElements(
    ['web', 'api', 'javascript', 'typescript', 'react', 'node'],
    { min: 0, max: 4 },
  ),
  visibility: faker.helpers.arrayElement(['public', 'private']),
  forks: faker.number.int({ min: 0, max: 1000 }),
  open_issues: faker.number.int({ min: 0, max: 100 }),
  watchers: faker.number.int({ min: 0, max: 10000 }),
  default_branch: 'main',
  permissions: {
    admin: faker.datatype.boolean(),
    maintain: faker.datatype.boolean(),
    push: faker.datatype.boolean(),
    triage: faker.datatype.boolean(),
    pull: faker.datatype.boolean(),
  },
  ...overrides,
});

export const generateMockGitHubRepositoryLanguages = (
  overrides: Partial<GitHubRepositoryLanguages> = {},
): GitHubRepositoryLanguages =>
  Object.fromEntries(
    faker.helpers
      .arrayElements(programmingLanguages, { min: 1, max: 4 })
      .map((language) => [language, faker.number.int({ min: 0, max: 10000 })]),
  ) as GitHubRepositoryLanguages;

export const generateMockGitHubRepositories = (
  count: number,
): GitHubRepository[] => {
  return Array.from({ length: count }, () => generateMockGitHubRepository());
};
